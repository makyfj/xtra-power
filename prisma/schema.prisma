// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trainer       Trainer?  @relation(fields: [trainerId], references: [id])
  trainerId     String?   @unique
  client        Client?   @relation(fields: [clientId], references: [id])
  clientId      String?   @unique
}

model Trainer {
  id      String   @id @default(cuid())
  name    String?
  email   String?  @unique
  image   String?
  clients Client[]
  user    User?
  userId  String?  @unique
}

model Client {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  image     String?
  trainer   Trainer?  @relation(fields: [trainerId], references: [id])
  workout   Workout[]
  user      User?
  userId    String?   @unique
  trainerId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id          String     @id @default(cuid())
  name        String
  description String
  exercises   Exercise[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  client      Client?    @relation(fields: [clientId], references: [id])
  clientId    String?
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  sets        Set[]
  workoutId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Set {
  id         String   @id @default(cuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  reps       Int
  weight     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
